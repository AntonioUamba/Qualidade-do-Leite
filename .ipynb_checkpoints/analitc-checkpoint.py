import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard de An√°lise de Leite",
    page_icon="ü•õ",
    layout="wide"
)

# T√≠tulo do Dashboard
st.title("ü•õ Dashboard de An√°lise Explorat√≥ria de Amostras de Leite")
st.markdown("### Insights para Tomada de Decis√£o na Ind√∫stria de Latic√≠nios")
st.markdown("---")

# Fun√ß√£o para carregar e processar os dados
@st.cache_data
def load_and_process_data():
    df = pd.read_parquet("dados.parquet")

    # Lidar com valores ausentes: Imputar com a m√©dia para colunas num√©ricas
    numerical_cols_with_nans = [col for col in ["Case√≠na", "Densidade"] if df[col].isnull().any()]
    for col in numerical_cols_with_nans:
        df[col] = df[col].fillna(df[col].mean())

    # Feature Engineering: Extrair informa√ß√µes da coluna DATAANALISE
    df["Ano"] = df["DATAANALISE"].dt.year
    df["Mes"] = df["DATAANALISE"].dt.month
    df["DiaSemana"] = df["DATAANALISE"].dt.dayofweek # 0=Segunda, 6=Domingo
    df["Trimestre"] = df["DATAANALISE"].dt.quarter

    # Converter \'Estac√£o\' para tipo categ√≥rico, se ainda n√£o for
    df["Estac√£o"] = df["Estac√£o"].astype("category")
    df["CIDADE"] = df["CIDADE"].astype("category")
    
    return df

df = load_and_process_data()

# Fun√ß√£o para gerar e salvar as visualiza√ß√µes
@st.cache_data
def generate_visualizations(df_full):
    # --- Configura√ß√µes de Visualiza√ß√£o ---
    sns.set_style("whitegrid")
    plt.rcParams["figure.figsize"] = (10, 6)
    plt.rcParams["font.size"] = 12

    # --- Visualiza√ß√£o 1: Distribui√ß√£o dos Componentes Principais do Leite ---
    fig1, axes1 = plt.subplots(1, 3, figsize=(18, 5))
    sns.histplot(df_full["Gordura"], kde=True, color="skyblue", ax=axes1[0])
    axes1[0].set_title("Distribui√ß√£o de Gordura")
    axes1[0].set_xlabel("Gordura (%)")
    axes1[0].set_ylabel("Frequ√™ncia")

    sns.histplot(df_full["Proteina"], kde=True, color="lightcoral", ax=axes1[1])
    axes1[1].set_title("Distribui√ß√£o de Prote√≠na")
    axes1[1].set_xlabel("Prote√≠na (%)")
    axes1[1].set_ylabel("Frequ√™ncia")

    sns.histplot(df_full["Lactose"], kde=True, color="lightgreen", ax=axes1[2])
    axes1[2].set_title("Distribui√ß√£o de Lactose")
    axes1[2].set_xlabel("Lactose (%)")
    axes1[2].set_ylabel("Frequ√™ncia")
    plt.tight_layout()
    fig1.savefig("distribuicao_componentes.png")
    plt.close(fig1)

    # --- Visualiza√ß√£o 2: Gordura M√©dia por Esta√ß√£o ---
    fig2, ax2 = plt.subplots(figsize=(10, 6))
    gordura_por_estacao = df_full.groupby("Estac√£o", observed=False)["Gordura"].mean().sort_values(ascending=False)
    sns.barplot(x=gordura_por_estacao.index, y=gordura_por_estacao.values, palette="viridis", ax=ax2)
    ax2.set_title("Gordura M√©dia por Esta√ß√£o do Ano")
    ax2.set_xlabel("Esta√ß√£o")
    ax2.set_ylabel("Gordura M√©dia (%)")
    fig2.savefig("gordura_por_estacao.png")
    plt.close(fig2)

    # --- Visualiza√ß√£o 3: Prote√≠na M√©dia por Cidade (Top N) ---
    top_n = st.sidebar.slider('Quantas cidades mostrar no gr√°fico de prote√≠na m√©dia?', min_value=5, max_value=30, value=10)
    proteina_por_cidade = df_full.groupby("CIDADE", observed=False)["Proteina"].mean().sort_values(ascending=False).head(top_n)
    fig3, ax3 = plt.subplots(figsize=(10, top_n * 0.6))
    bars = sns.barplot(x=proteina_por_cidade.values, y=proteina_por_cidade.index, palette="magma", ax=ax3)
    ax3.set_title(f"Top {top_n} Cidades com Maior Prote√≠na M√©dia")
    ax3.set_xlabel("Prote√≠na M√©dia (%)")
    ax3.set_ylabel("Cidade")
    # Adicionar valores nas barras
    for i, v in enumerate(proteina_por_cidade.values):
        ax3.text(v + 0.01, i, f"{v:.2f}", color='black', va='center', fontsize=10)
    plt.tight_layout()
    fig3.savefig("proteina_por_cidade.png")
    st.pyplot(fig3)
    plt.close(fig3)

    # --- Visualiza√ß√£o 4: Tend√™ncia Anual da Gordura ---
    fig4, ax4 = plt.subplots(figsize=(10, 6))
    gordura_por_ano = df_full.groupby("Ano")["Gordura"].mean()
    sns.lineplot(x=gordura_por_ano.index, y=gordura_por_ano.values, marker="o", color="darkblue", ax=ax4)
    ax4.set_title("Tend√™ncia Anual da Gordura M√©dia no Leite")
    ax4.set_xlabel("Ano")
    ax4.set_ylabel("Gordura M√©dia (%)")
    plt.xticks(rotation=45)
    fig4.savefig("tendencia_gordura_anual.png")
    plt.close(fig4)

    # --- Visualiza√ß√£o 5: Matriz de Correla√ß√£o ---
    fig5, ax5 = plt.subplots(figsize=(10, 8))
    correlation_matrix = df_full[["Gordura", "Proteina", "Lactose", "ST", "Log CCS", "CCS", "Case√≠na", "Densidade", "SNG"]].corr()
    sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", fmt=".2f", linewidths=.5, ax=ax5)
    ax5.set_title("Matriz de Correla√ß√£o das Vari√°veis Num√©ricas")
    plt.tight_layout()
    fig5.savefig("matriz_correlacao.png")
    plt.close(fig5)

# Gerar as visualiza√ß√µes (ser√£o cacheadas)
generate_visualizations(df)

# Sidebar para filtros
st.sidebar.header("üîç Filtros de Dados")

# Filtro por Esta√ß√£o
estacoes_selecionadas = st.sidebar.multiselect(
    "Selecione as Esta√ß√µes",
    options=df["Estac√£o"].unique(),
    default=df["Estac√£o"].unique()
)

# Filtro por Ano
anos_selecionados = st.sidebar.multiselect(
    "Selecione os Anos",
    options=sorted(df["Ano"].unique()),
    default=sorted(df["Ano"].unique())
)

# Aplicar filtros
df_filtered = df[
    (df["Estac√£o"].isin(estacoes_selecionadas)) &
    (df["Ano"].isin(anos_selecionados))
]

# Exibir estat√≠sticas gerais
st.header("üìä Estat√≠sticas Gerais do Dataset Filtrado")

col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("Total de Amostras", f"{len(df_filtered):,}")
with col2:
    st.metric("Gordura M√©dia", f"{df_filtered["Gordura"].mean():.2f}%")
with col3:
    st.metric("Prote√≠na M√©dia", f"{df_filtered["Proteina"].mean():.2f}%")
with col4:
    st.metric("Lactose M√©dia", f"{df_filtered["Lactose"].mean():.2f}%")

st.markdown("---")

# Se√ß√£o de visualiza√ß√µes
st.header("üìà Visualiza√ß√µes e Insights")

# Tabs para organizar as visualiza√ß√µes
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "Distribui√ß√£o dos Componentes",
    "An√°lise Sazonal",
    "An√°lise Regional",
    "Tend√™ncias Temporais",
    "Correla√ß√µes"
])

with tab1:
    st.subheader("Distribui√ß√£o dos Componentes Principais do Leite")
    st.image("distribuicao_componentes.png", use_container_width=True)
    
    st.markdown("""
    **Insights:**
    - A distribui√ß√£o de **Gordura** mostra uma concentra√ß√£o em torno de 3.5% a 4.0%, com uma distribui√ß√£o aproximadamente normal.
    - A **Prote√≠na** apresenta uma distribui√ß√£o mais estreita, centrada em torno de 3.2%.
    - A **Lactose** tem uma distribui√ß√£o mais ampla, indicando maior variabilidade entre as amostras.
    """)

with tab2:
    st.subheader("Gordura M√©dia por Esta√ß√£o do Ano")
    st.image("gordura_por_estacao.png", use_container_width=True)
    
    # Calcular estat√≠sticas para o dataset filtrado
    gordura_estacao = df_filtered.groupby("Estac√£o", observed=False)["Gordura"].mean().sort_values(ascending=False)
    
    st.markdown("""
    **Insights:**
    - O **Outono** e o **Inverno** apresentam os maiores teores m√©dios de gordura no leite.
    - Durante a **Primavera** e o **Ver√£o**, o teor de gordura tende a ser ligeiramente menor.
    - **Recomenda√ß√£o:** Ajustar a alimenta√ß√£o do gado durante a primavera e o ver√£o para manter n√≠veis consistentes de gordura.
    """)
    
    st.dataframe(gordura_estacao, use_container_width=True)

with tab3:
    st.subheader("Top 10 Cidades com Maior Prote√≠na M√©dia")
    st.image("proteina_por_cidade.png", use_container_width=True)
    
    # Calcular estat√≠sticas para o dataset filtrado
    proteina_cidade = df_filtered.groupby("CIDADE", observed=False)["Proteina"].mean().sort_values(ascending=False).head(10)
    
    st.markdown("""
    **Insights:**
    - Cidades como **CARLOS BARBOSA-RS** e **JAQUIRANA-RS** se destacam com os maiores teores de prote√≠na.
    - Essas regi√µes podem ter pr√°ticas de manejo superiores ou condi√ß√µes ambientais favor√°veis.
    - **Recomenda√ß√£o:** Investigar as pr√°ticas dessas regi√µes para replicar em outras √°reas.
    """)
    
    st.dataframe(proteina_cidade, use_container_width=True)

with tab4:
    st.subheader("Tend√™ncia Anual da Gordura M√©dia no Leite")
    st.image("tendencia_gordura_anual.png", use_container_width=True)
    
    # Calcular estat√≠sticas para o dataset filtrado
    gordura_ano = df_filtered.groupby("Ano")["Gordura"].mean()
    
    st.markdown("""
    **Insights:**
    - A gordura m√©dia permanece relativamente est√°vel ao longo dos anos, com pequenas varia√ß√µes.
    - N√£o h√° uma tend√™ncia clara de aumento ou diminui√ß√£o significativa.
    - **Recomenda√ß√£o:** Manter o monitoramento cont√≠nuo para detectar mudan√ßas futuras.
    """)
    
    st.dataframe(gordura_ano, use_container_width=True)

with tab5:
    st.subheader("Matriz de Correla√ß√£o das Vari√°veis Num√©ricas")
    st.image("matriz_correlacao.png", use_container_width=True)
    
    st.markdown("""
    **Insights:**
    - **Prote√≠na** e **Case√≠na** t√™m uma correla√ß√£o muito forte (0.93), o que √© esperado biologicamente.
    - **Gordura** e **S√≥lidos Totais (ST)** tamb√©m apresentam alta correla√ß√£o (0.88).
    - **Lactose** tem correla√ß√£o negativa com **Log CCS** e **CCS**, sugerindo que amostras com maior contagem de c√©lulas som√°ticas tendem a ter menor lactose.
    - **Recomenda√ß√£o:** Utilizar essas correla√ß√µes para otimizar formula√ß√µes de produtos l√°cteos e controle de qualidade.
    """)

# Se√ß√£o de an√°lise detalhada
st.markdown("---")
st.header("üî¨ An√°lise Detalhada")

col1, col2 = st.columns(2)

with col1:
    st.subheader("Estat√≠sticas Descritivas")
    st.dataframe(
        df_filtered[["Gordura", "Proteina", "Lactose", "ST", "CCS", "Case√≠na", "Densidade", "SNG"]].describe(),
        use_container_width=True
    )

with col2:
    st.subheader("Distribui√ß√£o por Esta√ß√£o")
    estacao_counts = df_filtered["Estac√£o"].value_counts()
    st.bar_chart(estacao_counts)

# Footer
st.markdown("---")
st.markdown("**Desenvolvido por:** Manus AI | **Dataset:** An√°lise de Amostras de Leite | **Foco:** Tratamento de Dados e An√°lise Explorat√≥ria para Tomada de Decis√£o")
